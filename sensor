#!/bin/sh /etc/rc.common

START=90
STOP=10
USE_PROCD=1

APP_NAME="appSensor.py"
APP_PATH="/root/work/ups/db"
PYTHON_EXEC="/usr/bin/python"
LOG_FILE="/var/log/modbus_sensor_reader.log"
PID_FILE="/var/run/modbus_sensor_reader.pid"

validate_service() {
    # Check if required files exist
    [ -f "$PYTHON_EXEC" ] || {
        echo "Error: Python executable not found at $PYTHON_EXEC"
        return 1
    }
    
    [ -f "$APP_PATH/$APP_NAME" ] || {
        echo "Error: Application script not found at $APP_PATH/$APP_NAME"
        return 1
    }
    
    return 0
}

start_service() {
    echo "Starting $APP_NAME service..."
    
    if ! validate_service; then
        echo "Validation failed, cannot start service"
        return 1
    fi
    
    procd_open_instance
    procd_set_param command "$PYTHON_EXEC" "$APP_PATH/$APP_NAME"
    
    # Process management
    procd_set_param respawn 30 0  # Restart after 30 seconds if it crashes
    procd_set_param pidfile "$PID_FILE"
    
    # Logging configuration
    procd_set_param stdout 1
    procd_set_param stderr 1
    # Alternative: Log to file instead of system log
    # procd_set_param file "$LOG_FILE"
    # procd_append_param file "$LOG_FILE.1"
    
    # Environment
    procd_set_param env HOME=/root
    procd_set_param env PYTHONPATH=/usr/lib/python2.7/site-packages
    procd_set_param cwd "$APP_PATH"
    procd_set_param nice 10
    
    procd_close_instance
    
    echo "$APP_NAME service started successfully."
    return 0
}

stop_service() {
    echo "Stopping $APP_NAME service..."
    # procd will handle the stop automatically
    # Additional cleanup if needed:
    [ -f "$PID_FILE" ] && rm -f "$PID_FILE"
}

reload_service() {
    echo "Reloading $APP_NAME configuration..."
    stop_service
    start_service
}
